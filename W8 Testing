# W08D01 - Unit & Integration Testing

- [ ] Tools for testing React
- [ ] Coverage Reports
- [ ] Add Features/Tests to our App
- [ ] `debug()` and `prettyDOM()`
- [ ] Mocking AJAX Requests and Functions

* Static => linter
* Unit => testing the smallest pieces of your code /app
* Intergration => multiple pieces working together
* End-to-end => user stories

* Regression => write a test to replicate the bug, capture bugs coming back

### Test Runner
* Jest
  * test runner much like Mocha
  * tests only fail if the code throws an error
  * minimal assetion functionality
* DOM Testing Library
  * checking for classes, id's, etc
  * rendering React components
  
### Do not text with exterior API
 * use fake api with Axios
```
//import the library under test
import axios from 'axios';
//tell jest to fake that library
jest.mock('axios');
//create fake data
const data = [
  {
    id: 1,
    name: 'Alice',
    points: 15
  }
];
```
  * find general text, findByText('text', {exact : false});

### Test with Jest
```helpers.test.js
import { announceResult } from '../helpers'

describe('robotChoice function', ()=? {
  
  test('returns the winning item if cheating is true', ()=>{
    const playerSelection = 'Moai';
    const cheating = true;
    const actual = robotChoice(playerSelection, cheating); //put values that has default at the end, put variables with semantic meaning instead of direct primitive value to easy to read
    const expected = 'Tree';
    
    expect(actual).toBe(expected);
  });
  
  test('returns the valid item if cheating is false', ()=>{});
    const playerSelection = 'Moai';
    const cheating = false;
    
    const actual = robotChoice(playerSelection, cheating);
    const expected = ['Moai', 'Axe', 'Tree'];
    
    expected.includes(actual);
    
    expect(actual).toBe(expected);
    expect(expected.includes(actual)).toBe(true); // if error will return false does not equal true, not very descriptive error message
    
    expect(expected).toContain(actual);//Jest function that will result in more descriptive error message if fail
    // flakey tests are tests that only work sometimes
});
```
```
export const robotChoice = (playerSelection, cheating)=>{
  const winning = {
    Tree: 'Axe'
    Axe: 'Moai',
    Moai: 'Tree'
  };
  
  if(cheating) {
    return winning[playerSelection];
  }
  
  const options = ['Moai', 'Axe', 'Tree'];
  const randomIndex = Math.floor(Math.random() * options.length);
  return options[randomIndex];
```
```Game.test.js
import React from 'react';
import Game from '../Game';
import { render } from '@testing-library/react';

describe('tests for the Game component',()=>{
  test('toggle the cheating boolean by clicking on the robot head icon', ()=>{
    render(<Game />);
    
  });

});

### prettyDom
* show the dom
* console.log(prettyDom(container))
* import from react test library

### debug
* from render
debug(); //just this syntax, also show the dom, less syntax

### coverage report
*verbose provide more info display in test
*coverage shows what code is tested, will generate a report for testing coverage
*disable watch because unless disable, will only report on watched file which are recently changed files only.
npm test -- --verbose --coverage --watchAll=false
*add /coverage in .gitignore
